using System;

class Program
{
  
  /*
    Любая программа делится на поведение, это:
      — Функции (в C# они зовутся методами)
    и на данные, это:
      — Переменные
      
     Сейчас будем говорить про функции
  */
  
  // Функции а то есть поведение выражает в себе любые действия:
  static void Main()
  {
    
    //Циклы
    for(int i = 0; i < 100; i++)
    {
      Console.WriteLine($"{i} Цикл");
    }
    
    //Условия
    if(30 > 20)
    {
      Console.WriteLine("Условия");
    }
    
    //Использование переменных
    int a = 1;
    a += 10;
    Console.WriteLine($"1 + 10 = {a}");
    
    //Вызов других функций
    Console.WriteLine("Вызов функции WriteLine");
    
  }
  
  /*
    То есть поведение это — какие либо действия
    или операции над переменными с помощью циклов,
    условий и других функций
    
    Функция Main это тоже поведение, так как способна содержать
    операции над переменными и все остальное характерное для поведения
    
    Данные и поведение дополняют друг друга,
    1. Данные хранят информацию
    2. Поведение осуществляет операции над данными
    
    Так давайте разберемся что такое функция и как их использовать:
    Функция — это именованное поведение, 
    выполняющая некоторую операцию
    и возвращающая результат своей работы.
    
    разберем что значит каждая строка этого определения:
    именованное поведение значит что это поведение, имеющее имя 
    (например WriteLine это имя данное функции вывода текста на экран консоли)
    выполняющая некоторую операцию, мы знаем что поведение это операции над данными
    и возвращающая результат своей работы, тут понятно
    (например ReadLine вводит данные с консоли и возвращает строку которую ввел пользователь - это результат ее работы)
    
    Функция в C# объявляется в любом классе, без класса функция существовать не может, в нашем случае функция Main в классе Program:
    (То что не выделено квадратными скобками: обязательно надо писать при объявлении)
    
    [Модификаторы] тип_возвращаемого_значения имя_функции([перечисление_принимаемых_параметров])
    {
      Поведение;
    }
    
    Модификаторы - не обязательны к заполнению о них будет рассказано когда придем к классам
    
    тип_возвращаемого_значения - это обязательно к заполнению, это тип значения которое функция ДОЛЖНА вернуть
    за возврат отвечает ключевое слово return, как это работает будет показано на примере

    имя_функции - обязательно к заполнению, на работу функции имя не влияет

    перечисление_принимаемых_параметров если не писать их то функция не будет принимать параметров
    параметры это входные данные функции, в Excel функция SUM принимает в качестве параметра диапазон
    например A1:A2, тоже что и WriteLine принимает в качестве параметра строку, 
    при объявлении функции мы вольны устанавливать какие параметры будет принимать наша функция, 
    покажу как это сделать позже

    Поведение - обычный код с циклами, использованиями переменных и всем присущим поведению
  */

  //Функция которая ДОЛЖНА вернуть целое число
  int DoljnaVernutChoslo()
  {
	  //Если не вернуть число с помощью return программа будет компилироваться с ошибкой
	  return 1;
  }

  //Ключевое слово void на месте возвращаемого значения означает что функция ДОЛЖНА ничего не возвращать
  void NichegoNeVozvratit()
  {
	  //Нужно не писать return
  }

  // мы объявили две функции, их можно вызвать как Console.WriteLine
  // однако, есть особенность, функции с модификатором static (каким и является Main)
  // не могут вызывать функции без такого же модификатора, почему это происходит разберемся когда придем к классам
	// следующие функции могут быть вызваны в статических методах (помеченных static а значит могут быть вызваны в Main)
  static int DoljnaVernutChislo()
  {
	  return 1;
  }

  static void NichegoNeVozvratit()
  {
	  // функция без return прекратит свою работу когда дойдет до фигурной скобки
	  // однако можно написать return; чтобы досрочно остановить выполнение функции
	  // когда функция доходит до return функция возвращает значение либо не возвращает в случае void
	  // и прекращает свою работу
  }

  static void Main()
  {

	  /*
	  	Функция вызывается так:
			если она создана в том-же классе что и вызвана:
				имя_функции(параметры);
			если она создана в другом классе:
				имя_класса_в_которой_функция_создана.имя_функции(параметры);

			Это объясняет почему мы вызываем Console.WriteLine именно так
			функция WriteLine создана в классе Console, поэтому в другом классе вызывается Console.WriteLine а не просто WriteLine
			DoljnaVernutChislo создана в классе Program, поэтому тут может быть вызвана без указания имени класса в котором определена
		*/

	  var a = DoljnaVernutChislo();
	  // переменная "a" будет типа int, так как функция возвращает этот тип
	  Console.WriteLine(a); // Выведет 1
	  var b = NichegoNeVozvratit(); // ОШИБКА! Нельзя присвоить void переменной
  }

  // Так можно написать все что душе угодно в функции а потом вызывать это в другом месте или несколько раз
  // Посмотрим на первую функцию с параметрами, создадим функцию которая принимает два числа и возвращает их сумму

	// Add переводится как "прибавить", int она возвращает потому что сумма чисел будет целым числом
  static int Add(int a, int b)
  // При перечислении параметров мы перечисляем по такому принципу:
  // тип_параметра_1 имя_параметра_1, тип параметра_2 имя_параметра_2
  // так можно перечислять параметров столько сколько угодно, зависит от фантазии того кто пишет функцию
  {
	  
	  int c = a + b;
	  return c;
  }

  static void Main()
  {
	  int number = Add(3, 4) // number будет равно 7, так как заложено в функцию

	  Console.WriteLine(number);
  }

  /* 
  	В этом уроке мы познакомились с понятием "Поведение"
	узнали как создавать функции которые возвращают результат своей работы и не возвращают
	узнали первый модификатор функции static
	узнали как вызвать созданную нами функцию
	
	*/
  
}
