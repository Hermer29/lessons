using System

class Program
{
  
  /*
    Любая программа делится на поведение, это:
      — Функции (в C# они зовутся методами)
    и на данные, это:
      — Переменные
      
     Сейчас будем говорить про первый вид поведения
  */
  
  // Функции содержат в себе любые действия:
  static void Main()
  {б
  хэю..
    
    //Циклы
    for(int i = 0; i < 100; i++)
    {
      Console.WriteLine($"{i} Цикл");
    }
    
    //Условия
    if(30 > 20)
    {
      Console.WriteLine("Условия");
    }
    
    //Использование переменных
    int a = 1;
    a += 10;
    Console.WriteLine($"1 + 10 = {a}");
    
    //Вызов других функций
    Console.WriteLine("Вызов функции WriteLine");
    
  }
  
  /*
    То есть поведение это — какие либо действия
    или операции над переменными с помощью циклов,
    условий и функций
    
    Функция Main это тоже поведение, так как способно содержать
    операции над переменными и все остальное характерное для поведения
    
    Данные и поведение дополняют друг друга,
    1. Данные хранят информацию
    2. Поведение осуществляет операции над данными
    
    Так давайте разберемся что такое функция и как их использовать:
    Функция — это именованное поведение, 
    выполняющая некоторую операцию
    и возвращающая результат своей работы.
    
    давайте разберемся что значит каждая строка этого определения:
    именованное поведение значит что это поведение, имеющее имя 
    (например WriteLine это имя данное поведению вывода текста на экран консоли)
    выполняющая некоторую операцию, мы знаем что поведение это операции над данными
    и возвращающая результат своей работы, тут понятно
    (например ReadLine вводит данные с консоли и возвращает строку которую ввел пользователь)
    
    Функция в C# объявляется так:
    (То что не выделено квадратными скобками: обязательно надо писать при объявлении
    
    [Модификаторы] тип_возвращаемого_значения имя_функции([перечисление_принимаемых_параметров])
    {
      Поведение;
    }
    
    Модификаторы - не обязательны к заполнению о них будет рассказано когда придем к классам
    тип_возвращаемого_значения - это обязательное к заполнению, это тип значения которое функция ДОЛЖНА вернуть
    за возврат отвечает ключевое слово return
  */
}