using System;

namespace TupleSample
{
    
    /*
        Кортеж — это контейнер способный содержать 
        бесконечное количество элементов. Отличается
        простотой определения и тем, что в кортеж 
        невозможно добавлять элементы (как и в массивы)
    */
    
    class Program
    {
        
        static void Main()
        {
            
            // Определяется кортеж так:
            // (значение1, значение2, ... и тд)
            var myTyple  = (1, 2, 3, 4); // название типа: (int, int, int, int)
            var myTyple4 = (6.5, 7.8, 10.2); // (double, double, double)
            var myTyple5 = ("hello World!", 100.6f); // (string, float)
            
            // Можно брать значения из других переменных
            int a = 2, b = 7;
            var myTyple2 = (a, b);
            
            // Можно по особому создать переменные и присвоить им значения:
            (int g, int f) = (1, 2); // g = 1, f = 2
            
            // Присваивая один кортеж другому можно обменивать значения переменных:
            // здесь a = 2, b = 7
            (a, b) = (b, a); 
            // здесь a = 7, b = 2
            
            // Присваивая один кортеж другому можно 
            // присвоить в одной строке значения двум переменным
            (a, b) = (9, 10); // a = 9, b = 10;
            
            //получать доступ к элементам в кортеже можно так:
            var myTyple3 = (7,9);
            int i = myTyple3.item1; // Первый элемент, 7
            int j = myTyple3.item2; // Второй элемент, 9
            // получать можно их с помощью item+номер_элемента (не индекс)
            
            // можно изменить способ получения элемента:
            // При определении:
            var tuple100 = (first: 1, second: 2);
            Console.WriteLine($"Кортеж с элементами {tuple100.first} и {tuple100.second}");
            // Выведет: Кортеж с элементами 1 и 2
            
            //Второй способ, тот же самый эффект:
            (int first, int second) tuple101 = (1,2);
        }
        
        /*
            Благодаря кортежам можно 
            функцией возвращать несколько значений
            
            возвращаемое значение кортежа указывается так:
            (тип_первого_значения, тип_второго_значения, ...)
            количество перечисленных типов соответствует количеству значений кортежа
            к кортежу невозможно добавлять элементы
        */
        
        /*
            Эта функция ничего не принимает и возвращает кортеж
            с тремя числами
        */
        static (int, int, int) Function()
        {
            return (1,2,3);
        }
        
        /*
            Эта функция принимает массив параметров и возвращает
            кортеж, первый элемент которого это сумма первой половины
            параметров, а второй элемент — второй половины 
        */
        static (int, int) ReturnTwoSums(params int[] args)
        {
            
            (int, int) result = (0,0);
            
            for (int i = 0; i < args.Length; i++)
            {
                
                if (i > args.Length / 2)
                {
                    result.item2 += args[i];
                }
                else
                {
                    result.item1 += args[i];
                }
                
            }
            return result;
        }
        
        /*
            Кортежи полезны, чтобы:
            1. Возвращать из функции несколько значений
            2. Хранить связанные значения
            
            Кортежи легко объявляются, при этом при создании
            кортежа не обязательно писать тип кортежа, можно
            их объявлять со словом var
        */
        
        
    }
}
